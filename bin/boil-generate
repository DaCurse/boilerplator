#!/usr/bin/env node

const { Command } = require('commander');
const { mkdirSync } = require('fs');
const { resolve, join } = require('path');
const { sync: rimraf } = require('rimraf');
const { isDirectorySync } = require('path-type');
const isRegex = require('is-regex');
const prettyMilliseconds = require('pretty-ms');
const { loadConfig } = require('../src/util/config');
const templateDirectory = require('../src/util/template-directory');
const parseArgs = require('../src/util/parse-args');
const generateProject = require('../src');

// Configure sub-command
const program = new Command();
program
  .usage('<template> -d <destination> [options] [placeholder1=...,]')
  .requiredOption('-d, --destination <path>', 'destination directory')
  .option('-f, --force', 'overwrite existing directory')
  .option(
    '-c, --config <path>',
    'custom config file or directory to look for a config file'
  )
  .parse(process.argv);

// Start measuring time
const startTime = Date.now();
console.info(`${program.name()} v${program.version()}`);

// Load config
const { config, filepath: configPath } = loadConfig(program.config);
const templateDirectoryPath = templateDirectory(
  config.templateDirectory,
  configPath
);
if (!templateDirectoryPath) {
  console.error(`Template directory specified in config not found!`);
  process.exit(1);
}

// If template is not present, show help and exit
if (program.args.length < 1) {
  console.info(program.help());
}

// Validate destination
if (!isDirectorySync(program.destination)) {
  try {
    mkdirSync(program.destination, { recursive: true });
  } catch (error) {
    console.error(`Failed to create destination directory: ${error}`);
    process.exit(1);
  }
} else if (program.force) {
  // Delete contents of destination directory if force mode is on
  rimraf(resolve(program.destination, '*'));
} else {
  console.error(
    `${program.destination} already exists! Use --force to overwrite the directory.`
  );
  process.exit(1);
}

// Finding the selected template's directory
const templateName = program.args.shift();
console.info(`Finding template '${templateName}'...`);
const templatePath = join(templateDirectoryPath, templateName);
if (!isDirectorySync(templatePath)) {
  console.error(`Template '${templateName}' doesn't exist in ${templatePath}.`);
  process.exit(1);
}

// Serialize placeholders into a map
console.info('Parsing placeholders...');
const placeholders = parseArgs(program.args, config.defaultPlaceholders);
const placeholderRegex = isRegex(config.placeholderRegex)
  ? config.placeholderRegex
  : new RegExp(config.placeholderRegex, 'g');

// Recursively copy template files, applying placeholders where applicable
console.info('Genearing project from template...');
generateProject(
  templatePath,
  program.destination,
  placeholders,
  placeholderRegex,
  config.gitOptions,
  program.force
).then(() =>
  console.info(`Done in ${prettyMilliseconds(Date.now() - startTime)}.`)
);
