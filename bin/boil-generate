#!/usr/bin/env node

const { Command } = require('commander');
const { mkdirSync } = require('fs');
const { resolve, join } = require('path');
const { sync: rimraf } = require('rimraf');
const { isDirectorySync } = require('path-type');
const isRegex = require('is-regex');
const prettyMilliseconds = require('pretty-ms');
const { loadConfig } = require('../src/util/config');
const templateDirectory = require('../src/util/template-directory');
const parseArgs = require('../src/util/parse-args');
const generateProject = require('../src');
const commandWrapper = require('../src/errors/command-wrapper');

// Configure sub-command
const program = new Command();
program
  .usage('<template> -d <destination> [options] [placeholder1=...,]')
  .requiredOption('-d, --destination <path>', 'destination directory')
  .option('-f, --force', 'overwrite existing directory')
  .action((opts) => commandWrapper(run, opts))
  .parse(process.argv);

function run(program) {
  // Start measuring time
  const startTime = Date.now();
  const { config, filepath: configPath } = loadConfig(program.config);
  const templateDir = templateDirectory(config.templateDirectory, configPath);

  // If template is not present, show help and exit
  if (program.args.length < 1) {
    console.info(program.help());
  }

  // Validate destination
  if (!isDirectorySync(program.destination)) {
    mkdirSync(program.destination, { recursive: true });
  } else if (program.force) {
    // Delete contents of destination directory if force mode is on
    rimraf(resolve(program.destination, '*'));
  } else {
    throw new Error(
      `${program.destination} already exists! Use --force to overwrite the directory.`
    );
  }

  // Finding the selected template's directory
  const templateName = program.args.shift();
  console.info(`Finding template '${templateName}'...`);
  const templatePath = join(templateDir, templateName);
  if (!isDirectorySync(templatePath)) {
    throw new Error(
      `Template '${templateName}' doesn't exist in ${templatePath}.`
    );
  }

  // Serialize placeholders into a map
  console.info('Parsing placeholders...');
  const placeholders = parseArgs(program.args, config.defaultPlaceholders);
  const placeholderRegex = isRegex(config.placeholderRegex)
    ? config.placeholderRegex
    : new RegExp(config.placeholderRegex, 'g');

  // Recursively copy template files, applying placeholders where applicable
  console.info('Genearing project from template...');
  generateProject(
    templatePath,
    program.destination,
    placeholders,
    placeholderRegex,
    config.gitOptions,
    program.force
  ).then(
    () =>
      console.info(`Done in ${prettyMilliseconds(Date.now() - startTime)}.`),
    (error) => console.error(`Error while generating project: ${error.message}`)
  );
}
