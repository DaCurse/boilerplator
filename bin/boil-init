#!/usr/bin/env node

const { writeFileSync, mkdirSync } = require('fs');
const { join, resolve } = require('path');
const { isFileSync } = require('path-type');
const { defaultConfig, defaultFilename } = require('../src/util/config');
const configDir = require('../src/util/config-dir');
const Command = require('../src/Command');

const program = new Command();
program
  .usage('--template-dir <path> [options]')
  .requiredOption('-t, --template-dir <path>', 'template directory path')
  .option('-d, --destination <path>', 'custom destination for the config file')
  .option('-f, --force', 'overwrite existing config')
  .option('-s, --spaces <number>', 'indentation size', 2, (value) =>
    parseInt(value, 10)
  )
  .action(run)
  .parse();

function run(options) {
  // Calculate config path
  const dir = options.destination ? options.destination : configDir();
  const configPath = join(dir, defaultFilename);

  console.log(`Creating default config file...`);
  if (!options.force && isFileSync(configPath)) {
    throw new Error(
      `${configPath} already exists! Use --force to overwrite it.`
    );
  }

  // Store custom config directory in environment
  if (options.destination) {
    writeFileSync(
      join(process.cwd(), '.env'),
      `CONFIG_DIR=${options.destination}`
    );
  }

  // Create config file
  const config = {
    templateDirectory: resolve(dir, options.templateDir),
    ...defaultConfig,
  };
  mkdirSync(dir, { recursive: true });
  writeFileSync(configPath, JSON.stringify(config, null, options.spaces));
  console.info(`Created config file at ${configPath}`);
  console.info(config);
}
